name: SonarQube
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.8.2
          cache: true
          
      - name: Install Build Wrapper
        uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v5
      
      - name: Run Build Wrapper
        run: |
          qmake6 SyntaxTutor.pro -config debug
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} make -j$(nproc)
      
      - name: Build backend tests with coverage
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtest-dev cmake
          cd /usr/src/gtest && sudo cmake . && sudo make && sudo cp lib/*.a /usr/lib
          cd $GITHUB_WORKSPACE
          g++ -std=gnu++2a -O0 -g --coverage -fprofile-arcs -ftest-coverage \
            backend/grammar.cpp backend/grammar_factory.cpp backend/ll1_parser.cpp backend/lr0_item.cpp backend/slr1_parser.cpp backend/symbol_table.cpp backend/tests.cpp \
            -Ibackend/include -lgtest -lgtest_main --coverage \
            -o test_runner

      - name: Run tests and dump XML
        run: ./test_runner --gtest_output=xml:reports/gtest-report.xml

      - name: Convert JUnit â†’ Sonar Generic Test Data
        run: |
          pip install sonar-test-report-converter
          mkdir -p reports
          sonar-test-report-converter \
          reports/gtest-report.xml \
          reports/sonar-test-execution.xml
        
      - name: Install gcovr & generate SonarQube XML coverage
        run: |
          sudo apt-get update
          sudo apt-get install -y gcovr
          gcovr -r . --sonarqube --output coverage.xml
      
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_KEY }}
        with:
          args: >
            --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json"
            --define sonar.coverageReportPaths=coverage.xml
            --define sonar.testExecutionReportPaths=reports/sonar-test-execution.xml


